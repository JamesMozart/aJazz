// Generated by CoffeeScript 1.7.1

/*
TransView class, view with transitions
 */
define(function(require, exports, module) {
  var TransView;
  TransView = aJazz.View.extend({

    /*
    		 * transition enabled or not
    		 * @type {Boolean}
     */
    transEnabled: true,
    className: "",

    /*
    		 * css transition class
    		 * @type {String}
     */
    transCls: "slideLeft",

    /*
    		 * css trnsition handling function
    		 * @type {Function}
     */
    transit: $.transit,

    /*
    		 * @override
    		 * @param  {PageView} 	view
    		 * @param  {Object} 	options
    		 * @return {View}		@view
    		 * options:{
    				forward:Boolean,
    				transCls:String,
    				transEnabled:Boolean
    			}
     */
    "switch": function(view, options) {
      if (view !== this) {
        view.$ele.addClass(aJazz.View.HIDDEN_CLS);
        this.transit(this._getTransOptions(this, view, options));
      }
      return this;
    },
    show: function(options) {
      this.transit(this._getTransOptions(null, this, options));
      return this;
    },
    hide: function(options) {
      this.transit(this._getTransOptions(this, options));
      return this;
    },
    _getTransOptions: function(fromView, toView, options) {
      var forward, transCls, transOptions;
      options = options || {};
      forward = options.forward !== false;
      transCls = options.transCls || (toView && forward || !fromView) ? toView.transCls : fromView.transCls;
      transOptions = {
        transCls: transCls,
        transEnabled: this.transEnabled && options.transEnabled,
        revert: !forward,
        callback: function() {
          if (fromView != null) {
            fromView.trigger("transEnd", [false, forward]);
          }
          if (toView != null) {
            return toView.trigger("transEnd", [true, forward]);
          }
        }
      };
      if (fromView) {
        transOptions.from = fromView.$ele;
      }
      if (toView) {
        transOptions.to = toView.$ele;
      }
      return transOptions;
    }
  });
  aJazz.config.set({

    /*
    		 * enable transitions for PageView and TransView
    		 * @param  {Boolean}	transEnabled
    		 * @return
     */
    "transEnabled": function(transEnabled) {
      return TransView.prototype.transEnabled = transEnabled;
    },

    /*
    		 * default transition css class for PageView and TransView
    		 * @param  {String} 	transCls
    		 * @return
     */
    "transCls": function(transCls) {
      return TransView.prototype.transCls = transCls;
    }
  });
  return TransView;
});
