// Generated by CoffeeScript 1.7.1

/*
TabView class, view with transitions
 */
define(function(require, exports, module) {
  var TabView;
  TabView = aJazz.View.extend({
    className: "",

    /*
    		@var 	{String}	current effect class for tab head
     */
    onClass: "on",

    /*
    		add a tab to the tab view
    		@param {String}		title	title display on tab head
    		@param {Function or aJazz.View}	factory	factory function return <aJazz.View>(for async view creation) or an <aJazz.View> for tab content
    		@param {Number}		index	position of the tab
    		@return {Number}	id of the new tab
     */
    addTab: function(title, factory, show, index) {
      var tab;
      if (index == null) {
        index = this.tabs.length;
      }
      tab = {
        id: ++this._idCounter,
        title: title
      };
      if (typeof factory === "function") {
        tab.factory = factory;
      } else {
        this.setView("tab" + tab.id, factory);
      }
      if (index > this.tabs.length) {
        index = this.tabs.length;
      } else if (index < 0) {
        index = 0;
      }
      this.tabs.splice(index, 0, tab);
      this.render$(".role-tab-head");
      (show || this.tabs.length === 1) && this.gotoTab(index);
      return this._idCounter;
    },

    /*
    		move a tab to another position
    		@param {Number}		from	tab index to move from
    		@param {Number}		to		tab index to move to
     */
    moveTab: function(from, to) {
      var tab;
      if (this.tabs.length === 0) {
        return;
      }
      tab = this.tabs[from];
      this.tabs.splice(from, 1);
      this.tabs.splice(to, 0, tab);
      if (this.currTabIndex === from) {
        this.currTabIndex = to;
      } else if (this.currTabIndex > from && this.currTabIndex <= to) {
        this.currTabIndex--;
      } else if (this.currTabIndex < from && this.currTabIndex >= to) {
        this.currTabIndex++;
      }
      this.render$(".role-tab-head");
    },
    moveTabById: function(id, to) {
      return moveTab(this.getTabIndexById(id, to));
    },
    getTabIndexById: function(id) {
      var i, tab, _i, _len, _ref;
      _ref = this.tabs;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        tab = _ref[i];
        if (tab.id === id) {
          return i;
        }
      }
      return -1;
    },

    /*
    		remove a tab from the tab view by position
    		@param 	{Number}	index	optional, position of the tab, remove all tabs if not given
    		@return {Number}	number of tabs remain
     */
    removeTab: function(index) {
      var $tabHead, id, tab, _i, _len, _ref;
      $tabHead = this.$(".role-tab-head");
      if (index != null) {
        id = this.tabs[index].id;
        this.tabs.splice(index, 1);
        ($tabHead.children().eq(index)).remove();
        this._removeTabView(id);
        if (index === this.currTabIndex) {
          this.currTabIndex = null;
          this.gotoTab(index - 1);
        } else if (index < this.currTabIndex) {
          this.currTabIndex--;
        }
      } else {
        _ref = this.tabs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tab = _ref[_i];
          this._removeTabView(tab.id);
        }
        this.tabs = [];
        this.currTabIndex = null;
        $tabHead.empty();
      }
      return this.tabs.length;
    },

    /*
    		remove a tab from the tab view by id
    		@param 	{Number}	id	id of the tab
    		@return {Number}	number of tabs remain
     */
    removeTabById: function(id) {
      return this.removeTab(this.getTabIndexById(id));
    },

    /*
    		tab to a tab by postion
    		@param 	{Number}	index
     */
    gotoTab: function(index) {
      var $currTab, $onTab, $tabHead, $tabs, tab, view;
      if (this.tabs.length === 0) {
        return;
      }
      if (index >= this.tabs.length) {
        index = this.tabs.length - 1;
      } else if (index < 0) {
        index = 0;
      }
      $tabHead = this.$(".role-tab-head");
      $tabs = $tabHead.children();
      $onTab = $tabs.eq(index);
      $currTab = $tabs.eq(this.currTabIndex);
      if (index !== this.currTabIndex) {
        view = this.getTabView(index);
        if (view == null) {
          tab = this.tabs[index];
          view = tab.factory();
          this.setView("tab" + tab.id, view);
        }
        this.bindView("tab-body", view);
        $currTab.removeClass(this.onClass);
        $onTab.addClass(this.onClass);
        this.currTabIndex = index;
        this.trigger("tabchange", [index, view]);
      }
    },

    /*
    		tab to a tab by id
    		@param 	{Number}	id
     */
    gotoTabById: function(id) {
      this.gotoTab(this.getTabIndexById(id));
    },

    /*
    		get a tab body view by position
    		@param 	{Number}	index
    		@return {aJazz.View}
     */
    getTabView: function(index) {
      return this.getTabViewById(this.tabs[index].id);
    },

    /*
    		get a tab body view by id
    		@param 	{Number}	id
    		@return {aJazz.View}
     */
    getTabViewById: function(id) {
      return this.getView("tab" + id);
    },

    /*
    		get current show tab body view
    		@return {aJazz.View}
     */
    getCurrentTabView: function() {
      return this.getTabView(this.currTabIndex);
    },
    _removeTabView: function(id) {
      return this.removeView("tab" + id);
    },
    _tabclick: function(e) {
      this.gotoTab(($(e.currentTarget)).index());
    },
    _tabdeleteclick: function(e) {
      this.removeTabById(($(e.currentTarget).closest("span")).data("id"));
      e.stopPropagation();
    },
    render: function() {
      aJazz.View.prototype.render.call(this);
      this.addEvent("click|.role-tab-head|>", this._tabclick);
      this.addEvent("click|.role-tab-head|.role-delete", this._tabdeleteclick);
    },
    init: function(options) {
      aJazz.View.prototype.init.call(this, options);
      if (this.options.onClass != null) {
        this.onClass = options.onClass;
      }

      /*
      			@var {Array<Object<id:Number,title:String>>} data of tabs
       */
      this.tabs = [];

      /*
      			@var {Number} id counter, plus 1 ever for new tab
       */
      this._idCounter = 0;

      /*
      			@var {Number} index of current show tab
       */
      this.currTabIndex = null;
    }
  });
  return TabView;
});
